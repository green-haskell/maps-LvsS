-- {-# LANGUAGE DeriveGeneric #-}
-- {-# LANGUAGE TypeSynonymInstances #-} -- for TypeSynonyms


module Ops where


import Control.DeepSeq


import qualified Data.Map.Lazy as M


{-
import GHC.Generics (
    Generic
    )
-}

import Types


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

--instance NFData a => NFData ( M.HashMap k a )


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

-- For testing

a_ten = addNDistinctFrom M.empty 10 0
a_ten_1 = addNDistinctFrom M.empty 10 11

a_one_thousand = addNDistinctFrom M.empty 1000 0
a_ten_thousand = addNDistinctFrom M.empty 10000 0

a_fifty_thousand = addNDistinctFrom M.empty 50000 0

a_one_hundred_thousand = addNDistinctFrom M.empty 100000 0


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Add n, distinct, consecutive, elements, from m, to a map.

-}

addNDistinctFrom :: M.Map Key Datum -> Int -> Datum -> M.Map Key Datum
addNDistinctFrom a 0 _ = a
addNDistinctFrom a n m = addNDistinctFrom ( M.insert ( m + n - 1 ) ( m + n - 1 ) a ) ( n - 1 ) m


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Add all elements contained in map b, to the map a.

-}

addAll :: M.Map Key Datum -> M.Map Key Datum -> M.Map Key Datum
addAll = M.union


{-

    Add all elements contained in map b, to map a.
    Repeat n times.

-}

addAllNTimes :: M.Map Key Datum -> M.Map Key Datum -> Int -> M.Map Key Datum
addAllNTimes a _ 0 = a
addAllNTimes a b n = deepseq ( addAll a b ) ( addAllNTimes a b ( n - 1 ) )


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Clear an map.

-}

clear :: M.Map Key Datum -> M.Map Key Datum
clear a = removeAll a a


{-
alt_clear :: M.Map Key Datum -> M.Map Key Datum
alt_clear a = if ( A.null a ) then a else alt_clear ( remove a )
-}


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Check if an map a contains an element e.

-}

{-
contains :: M.Map Key Datum -> Datum -> Bool
contains a e = not . A.null . A.filter ( (==) e ) $ a
-}

{-

    Careful: The Datum type synonym, is the same as the Key (which A.member accepts), it's being used interchangeably; if this changes there will be problems!

-}

contains :: M.Map Key Datum -> Datum -> Bool
contains = flip M.member


{-

    Check if a map a contains an element e.
    Repeat n times.

    Careful: The Datum type synonym, is the same as the Key, it's being used interchangeably

-}

containsNTimes :: M.Map Key Datum -> Datum -> Int -> Bool
containsNTimes _ _ 0 = False
containsNTimes a e n = ( (||) ( containsNTimes a e ( n - 1 ) ) ) $!! ( contains a e )


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Check if a map a contains all elements in a map b.

-}

containsAll :: M.Map Key Datum -> M.Map Key Datum -> Bool
containsAll a b =
    let
        bKeys = M.keys b
    in
        and . map (\ bk -> ( M.member bk a ) && ( ( a M.! bk ) == ( b M.! bk ) ) ) $ bKeys



{-

    Check if a map a contains all elements in a map b.
    Repeat n times.

-}

containsAllNTimes :: M.Map Key Datum -> M.Map Key Datum -> Int -> Bool
containsAllNTimes _ _ 0 = False
containsAllNTimes a b n = ( (||) ( containsAllNTimes a b ( n - 1 ) ) ) $!! ( containsAll a b )


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Iterate through a map.

    Note: it only "maps" over the elements, not the keys

-}

iterator :: M.Map Key Datum -> M.Map Key Datum
iterator = M.map id


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Remove element of a Map.

-}

remove :: M.Map Key Datum -> Key -> M.Map Key Datum
remove a k = if ( M.null a ) then a else ( M.delete k a )

{-

    Removes  element of an map, n times.

-}

{--- This worked!
removeNTimes :: M.Map Key Datum -> Int -> M.Map Key Datum
removeNTimes a 0 = a
removeNTimes a n = deepseq ( remove a ) ( removeNTimes a ( n - 1 ) )
-}

-- This is an experiment!
removeNTimes :: M.Map Key Datum -> [ Key ] -> M.Map Key Datum
removeNTimes a [] = a
removeNTimes a ( k : ks ) = deepseq ( remove a k ) ( removeNTimes a ks )


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Remove all elements, contained in b, from a.

-}

removeAll :: M.Map Key Datum -> M.Map Key Datum -> M.Map Key Datum
removeAll = M.difference


{-

    Remove all elements, contained in b, from a.
    Repeat n times.

-}

removeAllNTimes :: M.Map Key Datum -> M.Map Key Datum -> Int -> M.Map Key Datum
removeAllNTimes a _ 0 = a
removeAllNTimes a b n =  deepseq ( removeAll a b ) ( removeAllNTimes a b ( n - 1 ) )


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    Retain all elements contained in b, in a.

-}

retainAll :: M.Map Key Datum -> M.Map Key Datum -> M.Map Key Datum
retainAll = M.intersectionWith const


{-

    Retain all elements contained in b, in a.
    Repeat n times.

-}

retainAllNTimes :: M.Map Key Datum -> M.Map Key Datum -> Int -> M.Map Key Datum
retainAllNTimes a _ 0 = a
retainAllNTimes a b n =  deepseq ( retainAll a b ) ( retainAllNTimes a b ( n - 1 ) )


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------

{-

    toList.

-}

toList :: M.Map Key Datum -> [ ( Key , Datum ) ]
toList = M.foldrWithKey ( \ k a b -> ( k , a ) : b ) []


{-

    toList.
    Repeat n times.

-}

toListNTimes :: M.Map Key Datum -> Int -> [ ( Key , Datum ) ]
toListNTimes _ 0 = []
toListNTimes a n = deepseq ( toList a ) ( toListNTimes a ( n - 1 ) )


-- ---------- ---------- ---------- ---------- ---------- ---------- ----------


